@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Controllers
@using Umbraco.Core.Services


@{

    var registerModel = Members.CreateRegistrationModel();

    registerModel.UsernameIsEmail = false;

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js");
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js");
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js");

    var success = TempData["FormSuccess"] != null;
}

@*NOTE: This RenderJsHere code should be put on your main template page where the rest of your script tags are placed*@
@Html.RenderJsHere()

@if (success)
{
    var member = Membership.GetUser();
    IMemberService memberService = Services.MemberService;
    memberService.AssignRole((int)member.ProviderUserKey, "ActiveMembers");
    @* This message will show if registerModel.RedirectUrl is not defined (default) *@
    <p>Registration succeeded.</p>
}
else
{
    using (Html.BeginUmbracoForm<UmbRegisterController>("HandleRegisterMember"))
    {
        <fieldset>
            @* <legend>Register Member</legend> *@

            @Html.ValidationSummary("registerModel", true)
            
            @Html.LabelFor(m => registerModel.Username)
            @Html.TextBoxFor(m => registerModel.Username)
            @Html.ValidationMessageFor(m => registerModel.Username)
            <br />
            @Html.LabelFor(m => registerModel.Name)
            @Html.TextBoxFor(m => registerModel.Name)
            @Html.ValidationMessageFor(m => registerModel.Name)
            <br />

            @Html.LabelFor(m => registerModel.Email)
            @Html.TextBoxFor(m => registerModel.Email)
            @Html.ValidationMessageFor(m => registerModel.Email)
            <br />

            @Html.LabelFor(m => registerModel.Password)
            @Html.PasswordFor(m => registerModel.Password)
            @Html.ValidationMessageFor(m => registerModel.Password)
            <br />

            @if (registerModel.MemberProperties != null)
            {
                @*
                    It will only displays properties marked as "Member can edit" on the "Info" tab of the Member Type.
                *@
                for (var i = 0; i < registerModel.MemberProperties.Count; i++)
                {
                    @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)
                    @*
                        By default this will render a textbox but if you want to change the editor template for this property you can
                        easily change it. For example, if you wanted to render a custom editor for this field called "MyEditor" you would
                        create a file at ~/Views/Shared/EditorTemplates/MyEditor.cshtml", then you will change the next line of code to
                        render your specific editor template like:
                        @Html.EditorFor(m => registerModel.MemberProperties[i].Value, "MyEditor")
                    *@
                    @Html.EditorFor(m => registerModel.MemberProperties[i].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
                    <br />
                }
            }

            @Html.HiddenFor(m => registerModel.MemberTypeAlias)
            @Html.HiddenFor(m => registerModel.RedirectUrl)
            @Html.HiddenFor(m => registerModel.UsernameIsEmail)

            <button>Register</button>
        </fieldset>
    }
}